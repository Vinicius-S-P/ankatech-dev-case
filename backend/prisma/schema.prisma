generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADVISOR
  VIEWER
}

enum GoalType {
  RETIREMENT
  SHORT_TERM
  MEDIUM_TERM
  LONG_TERM
}

enum EventType {
  DEPOSIT
  WITHDRAWAL
  INCOME
  EXPENSE
}

enum Frequency {
  ONCE
  MONTHLY
  YEARLY
}

enum InsuranceType {
  LIFE
  DISABILITY
  HEALTH
  PROPERTY
}

enum AssetClass {
  STOCKS
  BONDS
  REAL_ESTATE
  COMMODITIES
  CASH
  CRYPTO
  PRIVATE_EQUITY
  OTHER
}

// Models
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      UserRole  @default(VIEWER)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  clientsAsAdvisor Client[] @relation("AdvisorClients")
  
  @@map("users")
}

model Client {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  age           Int
  active        Boolean   @default(true)
  familyProfile String?   // JSON or text description
  advisorId     String?
  
  // Relations
  advisor       User?     @relation("AdvisorClients", fields: [advisorId], references: [id])
  wallets       Wallet[]
  goals         Goal[]
  events        Event[]
  simulations   Simulation[]
  insurance     Insurance[]
  
  // Computed fields stored for performance
  totalWealth   Float     @default(0)
  alignmentPercentage Float @default(0)
  alignmentCategory String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("clients")
}

model Goal {
  id          String    @id @default(cuid())
  clientId    String
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  type        GoalType
  name        String
  description String?
  targetValue Float
  targetDate  DateTime
  currentValue Float    @default(0)
  
  // For retirement goals
  monthlyIncome Float?  // Desired monthly income in retirement
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("goals")
}

model Wallet {
  id           String      @id @default(cuid())
  clientId     String
  client       Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  assetClass   AssetClass
  description  String?
  currentValue Float
  percentage   Float       // Percentage of total portfolio
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@map("wallets")
}

model Event {
  id           String      @id @default(cuid())
  clientId     String
  client       Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  type         EventType
  name         String
  description  String?
  value        Float
  frequency    Frequency
  startDate    DateTime
  endDate      DateTime?
  
  // For recurring events
  lastProcessed DateTime?
  nextOccurrence DateTime?
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@map("events")
}

model Simulation {
  id           String      @id @default(cuid())
  clientId     String
  client       Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  name         String
  description  String?
  
  // Parameters used for simulation (JSON)
  parameters   Json        // { initialWealth, realRate, events, endYear, etc }
  
  // Results of simulation (JSON)
  results      Json        // Array of { year, projectedValue }
  
  // Metadata
  version      Int         @default(1)
  active       Boolean     @default(true)
  
  createdAt    DateTime    @default(now())
  
  @@map("simulations")
}

model Insurance {
  id           String        @id @default(cuid())
  clientId     String
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  type         InsuranceType
  provider     String
  policyNumber String?
  coverage     Float         // Coverage amount
  premium      Float         // Monthly/Annual premium
  premiumFrequency Frequency @default(MONTHLY)
  startDate    DateTime
  endDate      DateTime?
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@map("insurance")
}

// Keep existing models for backward compatibility (can be removed later)
model Data {
  id         String     @id @default(cuid())
  label      String
  value      Float
  category   String
  date       DateTime   @default(now())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  
  @@map("data")
}

model Investment {
  id             String          @id @default(cuid())
  name           String
  type           String
  assetType      String
  currentValue   Float
  initialValue   Float
  percentChange  Float           @default(0)
  allocation     Float           @default(0)
  date           DateTime        @default(now())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  @@map("investments")
}

model Allocation {
  id                String   @id @default(cuid())
  totalAllocated    Float
  emergencyExpected Float    @default(0)
  emergencyActual   Float    @default(0)
  date              DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("allocations")
}

model KPIData {
  id         String   @id @default(cuid())
  category   String
  percentage Float
  indexer    String?
  custody    String?
  date       DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("kpi_data")
}
